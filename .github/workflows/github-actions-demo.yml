name: GitHub Actions Demo
on:  [push]
jobs:
  lint-and-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Declare test coverage path
        id: coverage
        run: |
          echo "::set-output name=path::$GITHUB_WORKSPACE/.coverage"
          echo "::set-output name=file_name::$GITHUB_WORKSPACE/.coverage/coverage.out"

      - name: Create test coverage directory
        run: mkdir -p ${{ steps.coverage.outputs.path }}

      - name: Setup Go environment
        uses: actions/setup-go@v3.0.0
        with:
          go-version: '1.18'
          check-latest: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3.1.0

      - name: Run tests and generate coverage
        run:  go test ./... -race -coverprofile=${{ steps.coverage.outputs.file_name }} -covermode=atomic

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: ${{ steps.coverage.outputs.file_name }}
          flags: unittests
          verbose: true

  deploy-to-aws-lambda:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Declare commit hash
        id: commit
        run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

      - name: Declare build path and name
        id: build
        run: | 
          echo "::set-output name=path::$GITHUB_WORKSPACE/.build"
          echo "::set-output name=file_name::$GITHUB_WORKSPACE/.build/build_${{ steps.commit.outputs.hash }}"

      - name: Create build directory
        run: mkdir -p ${{ steps.build.outputs.path }}

      - name: Setup Go environment
        uses: actions/setup-go@v3.0.0
        with:
          go-version: '1.18'
          check-latest: true

      - name: Generate the binary
        run: GOOS=linux GOARCH=amd64 go build -o ${{ steps.build.outputs.file_name }} main.go

      - name: Zip the binary
        run: zip ${{ steps.build.outputs.file_name }}.zip ${{ steps.build.outputs.file_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::975962760978:role/GithubActionsLambdaDeployRole
          role-session-name: githubactionslambdadeployrole
          aws-region: me-south-1

      - name: Upload the binary to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: me-south-1
          AWS_DEFAULT_OUTPUT: json
        run: |
          aws lambda update-function-code --function-name=githubActions --zip-file=fileb://${{ steps.build.outputs.file_name }}.zip --profile githubactionslambdadeployrole
